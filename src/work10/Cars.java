package work10;


/* Задание 2

Лучше всего закреплять теорию практикой. Поэтому давайте немного по проектируем структуру приложения. Так получится применить новые знания о модификаторах доступа и наследовании классов.
Представим, что вам дали задание верхнеуровнево описать структуру приложения для небольшого магазина автомобилей. Компания хочет вести учёт автомобилей, но чтобы разработчики приступили к реализации приложения,
они просят предоставить информацию о иерархии автомобилей, их свойствах и возможностях.
В данном примере иерархией является непосредственно иерархия будущих классов(Родительские и дочерние классы будет её составлять), свойства - это параметры класса, а возможности - непосредственно методы
Как правило таким описанием или техническим заданием занимается заказчик или аналитик команды, описывая техническим языком, что требуется от разработки и как должен выглядеть продукт. В данном примере мы опустим эту часть.
Таким образом вам необходимо сделать следующее:

У каждого дочернего класса должно быть что-то особенно. (Параметры, методы и т.д.)
 */

public class Cars {

    String model;
    int force;
    boolean autoTransmission;

    void carDrive() {
        System.out.println("Машина едет");
    }
    void carChangeGear(int gear) {
        System.out.println("Переключение передачи на " + gear);
    }

}
